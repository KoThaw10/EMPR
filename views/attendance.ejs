<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://unpkg.com/boxicons@2.0.9/css/boxicons.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" />
    <link href='https://unpkg.com/boxicons@2.0.9/css/boxicons.min.css' rel='stylesheet'>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"/>
    
    <link rel="stylesheet" href="/attendance.css">
    <title>Attendance</title>
</head>

<body>
    <section id="attendance">
        <main>
            <div class="container">
                <div class="table-title">
                    <div class="row">
                        <div class="col-sm-8">
                            <h1>Attendance Details</h1>
                            <!-- <ul class="breadcrumb">
                                <li>
                                    <a href="/attendance">Attendance</a>
                                </li>
                                <li><i class='bx bx-chevron-right'></i></li>
                                <li>
                                    <a class="active" href="/dashboard">Home</a>
                                </li>
                            </ul> -->
                        </div>
                        <div class="col-sm-4">
                            <button class="import" onclick="importData()">Import Data</button>
                            <input class="input" type="file" id="fileInput" accept=".xlsx"><br>
                        </div>
                    </div>
                </div>

                <div class="table-wrapper">  
                    <div class="form-input">
                        <input type="text" id="nameSearch" placeholder="Search by Name" oninput="searchData()">
                    </div>
                    <div class="search-options">
                        <!-- Monthly and Annual search dropdowns -->
                        <select id="monthSelector" class="month">
                            <option value="">Select Month</option>
                            <option value="Jan">January</option>
                            <option value="Feb">February</option>
                            <option value="Mar">March</option>
                            <option value="Apr">April</option>
                            <option value="May">May</option>
                            <option value="June">June</option>
                            <option value="Jul">July</option>
                            <option value="Aug">August</option>
                            <option value="Sep">September</option>
                            <option value="Oct">October</option>
                            <option value="Nov">November</option>
                            <option value="Dec">December</option>
                        </select>

                        <select id="yearSelector" class="year">
                            <option value="">Select Year</option>
                            <option value="2021">2021</option>
                            <option value="2022">2022</option>
                            <option value="2023">2023</option>
                            <!-- Add more years as needed -->
                        </select>

                        <!-- Combined search button -->
                        <button class="searchButton" onclick="searchDataMothYear()">Search</button>
                    </div>
                    <table class="table" id="attendance" style="font-size: x-small;">
                        <thead>
                            <tr>
                                <th>Employee ID</th>
                                <th>Employee Name</th>
                                <th>Casual Leave</th>
                                <th>Medical Leave</th>
                                <th>Maternity Leave</th>
                                <th>Marriage Leave</th>
                                <th>Value of Casual Leave</th>
                                <th>Value of Medical Leave</th>
                                <th>Value of Maternity Leave</th>
                                <th>Value of Marriage Leave</th>
                                <th>Attendance</th>
                                <th>Total Attendance</th>
                                <th>Month</th>
                                <th>Year</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Table rows will be added dynamically -->
                        </tbody>
                    </table>
                </div>
            </div>
        </main>
        <!-- PAY Button -->
        <!-- pay pop up box -->
        <div class="modal-edit" id="modal">
            <div class="modal-header">
                <div class="title">Employee Paycheck</div>
                <button onclick=closeModal() class="close-button">&times;</button>
              </div>
              <div class="modal-body">
                <form id="employeeForm">
                    <div class="formGroup">
                      <h3>Employee Information</h3>
                    </div>
    
                    <div class="formGroup">
                      <label for="employeeID">Employee ID:</label>
                        <p id="employee_id"></p>
                    </div>
      
                    <div class="formGroup">
                        <label for="employeeName">Employee Name:</label>
                        <p id="employee_name"></p>
                    </div>
        
                    <div class="formGroup">
                      <label for="position">Position:</label>
                      <p id="position"></p>
                    </div>
      
                    <div class="formGroup">
                      <label for="employeeDep">Department:</label>
                      <p id="department_name"></p>
                    </div>
        
                    <div class="formGroup">
                      <h3>Paycheck</h3>
                    </div>
    
                    <div class="formGroup">
                      <label for="basicSalary"> Basic Salary:</label>
                      <p id="basic_salary"></p>
                    </div>
        
                    <div class="formGroup">
                        <label for="leave" id="#">Leave:</label>
                        <p id="leave"></p>
                    </div>
    
                    <div class="formGroup">
                      <label for="deduction" id="#">Deducted Amount:</label>
                      <p id="deduction"></p>
                  </div>
        
                    <div class="formGroup">
                        <label for="tax" id="">Tax:</label>
                        <p id="tax"></p>
                    </div>
    
                    
                    <div class="formGroup">
                      <h3>Total: </h3>
                      <p id="total"></p>
                    </div>
                    <p id="month" style="display: none;"></p>
                    <p id="year" style="display: none;"></p>
                  
                    <div class="formGroup">
                      <button type="submit" onclick=updateData()>Update</button>
                      <button type="button" onclick=closeModal() data-close-button id="cancelButton">Cancel</button>
                    </div>
                </form>
              </div>
        </div>
        <div id="overlay"></div>
        <!-- end of pay pop up box -->
        <!-- End of pay BUTTON -->
    </section>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.4/xlsx.full.min.js"></script>
    <script>

        document.addEventListener('DOMContentLoaded', function () {
            fetch('/attendanceStart') // Replace with the correct URL
                .then(response => response.json()) // Adjust this based on the response type from your server
                .then(data => {
                    console.log('Data received from the server:');
                    console.log(data);
                    showData(data); // Update the data container with the received data
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        });
        





        let importedData = [];

        function importData() {
            const fileInput = document.getElementById("fileInput");
            const attendanceTable = document.getElementById("attendance")

            if (fileInput.files.length === 0) {
                alert('Please select an Excel file before importing.');
                return;
            }
        
            const file = fileInput.files[0];
            const formData = new FormData();
            formData.append('excelFile', file);
        
            fetch('/upload', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                // Handle the data from the server and display
                
                console.log(data)
                alert("Attendance file is uploaded successfully!")
            })
            .catch(error => {
                console.error('Error:', error);
            });
            
        }

        function searchDataMothYear() {
            // Get selected month and year values
            const selectedMonth = document.getElementById('monthSelector').value;
            const selectedYear = document.getElementById('yearSelector').value;
            
            if (selectedMonth && selectedYear) {
                const dataD = {
                    month: selectedMonth,
                    year: parseInt(selectedYear)
                };
        
                // Make a POST request to the server
                fetch('/getAttMonthYear', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(dataD)
                })
                    .then(response => {
                        return response.json(); // Parse the response as JSON
                    })
                    .then(data => {
                        showData(data)
                    })
                    .catch(error => {
                        console.error('Fetch error:', error);
                    });
                
            } else {
                // Handle the case where a month and year are not selected
                alert('Please select a month and a year.');
            }
        }


        function showData(data){
            const attendanceTable = document.getElementById("attendance")
            // Clear the existing table body.
            attendanceTable.getElementsByTagName("tbody")[0].innerHTML = "";


            // Create a new table body and populate it with the data from the Excel file.
            const tbody = attendanceTable.getElementsByTagName("tbody")[0];
            data.data.forEach(item => {
                const row = document.createElement("tr");
                for (const key in item) {

                    const cell = document.createElement("td");

                    if(key === "payment_status"){
                        if(item[key] === "Not Paid"){
                            const payButton = document.createElement("button");
                            payButton.id = 'payButton';
                            payButton.dataset.modalTarget = '#modal'; // Set the data-modal-target attribute
                            payButton.type = 'paybutton'; // Set the type attribute
                            payButton.className = 'btn btn-info';
                            payButton.textContent = 'Pay';

                            payButton.addEventListener('click', function () {
                                const closestRow = this.closest('tr');
                                openModal(this.dataset.modalTarget, closestRow); // Pass the data to the openModal function
                                
                            });

                            cell.appendChild(payButton);
                            row.appendChild(cell);

                        }else{
                            const payButton = document.createElement("button");
                            payButton.textContent = "Paid"
                            payButton.className = 'btn btn-info';
                            payButton.disabled = true
                            payButton.classList.add("disabled-button");

                            cell.appendChild(payButton);
                            row.appendChild(cell);
                        }
                    }else{
                        cell.textContent = item[key];
                        row.appendChild(cell);
                    }
                    
                }
                        
                tbody.appendChild(row);
            });
        }

        function searchData() {
            const selectedMonth = document.getElementById("monthSelector").value;
            const selectedYear = document.getElementById("yearSelector").value;
            const nameToSearch = document.getElementById("nameSearch").value.toLowerCase();

            const tbody = document.getElementById("attendance").getElementsByTagName("tbody")[0];
            const rows = tbody.getElementsByTagName("tr");

            for (let i = 0; i < rows.length; i++) {
                const row = rows[i];
                const columns = row.getElementsByTagName("td");
                const attendanceDate = columns[10].textContent;
                const yearPart = attendanceDate.substring(0, 4);
                const monthPart = attendanceDate.substring(5, 7);
                const employeeName = columns[1].textContent.toLowerCase();

                const isNameMatch = nameToSearch === "" || employeeName.includes(nameToSearch);
                const isMonthMatch = selectedMonth === "" || monthPart === selectedMonth;
                const isYearMatch = selectedYear === "" || yearPart === selectedYear;

                if (isNameMatch && isMonthMatch && isYearMatch) {
                    row.style.display = "table-row";
                } else {
                    row.style.display = "none";
                }
            }
        }

        function updateData(){
            const data = []
            const fields = ['employee_id', 'employee_name', 'basic_salary',  'tax', 'deduction', 'total', 'month', 'year']
            fields.forEach(fieldName => {
                const inputField = modal.querySelector(`#${fieldName}`)
            if (inputField){
                const dataObject = {
                    key: fieldName,
                    value: inputField.textContent
                };
                data.push(dataObject);
            } 
            })
            console.log(data)
            insertSalary(data)

        }

        function insertSalary(data){
            fetch('/insertSalary', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data),
            })
            .then(response => response.json())
            .then(result => {
                console.log('Insertion result:', result);
            })
            .catch(error => {
                console.error('Error:', error);
            });
        }

        const overlay = document.getElementById('overlay');
        
        // Function to open the modal
        function openModal(target, data) {
            const empId = data.cells[0].textContent
            const casual_l = data.cells[2].textContent
            const medical_l = data.cells[3].textContent
            const maternity_l = data.cells[4].textContent
            const marriage_l = data.cells[5].textContent
            const b_casual_l = data.cells[6].textContent
            const b_medical_l = data.cells[7].textContent
            const b_maternity_l = data.cells[8].textContent
            const b_marriage_l = data.cells[9].textContent
            const attendance = data.cells[10].textContent
            const total_att = data.cells[11].textContent
            const month = data.cells[12].textContent
            const year = data.cells[13].textContent

            const requestData = {
                empId: empId,
                casual_l: casual_l,
                medical_l: medical_l,
                maternity_l: maternity_l,
                marriage_l: marriage_l,
                b_casual_l: b_casual_l,
                b_medical_l: b_medical_l,
                b_maternity_l: b_maternity_l,
                b_marriage_l: b_marriage_l,
                attendance: attendance,
                total_att: total_att,
                month: month,
                year: year
            }
            const modal = document.querySelector(target);
            getPayCheck(requestData, modal)
            

            if (modal) {
                modal.classList.add('active')
                overlay.classList.add('active')
        
            }
        }



        function getPayCheck(checkdata, modal){
            fetch('/getPayCheck', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                    // Add any other headers as needed
                },
                body: JSON.stringify(checkdata)
            })
            .then((response) => response.json())
            .then(data => {
                if (data.message) {
                    // Show an alert with the message from the server
                    console.log("paid")
                    alert(data.message);
                    location.reload()
                  } else {
                    const fields = ['employee_id', 'employee_name', 'position', 'department_name', 'basic_salary', 'leave',  'deduction', 'tax', 'total', 'month', 'year']


                    fields.forEach(fieldName => {
                        const inputField = modal.querySelector(`#${fieldName}`)
                    if (inputField){
                        inputField.textContent = data.data[fieldName]
                    } 
                    })
                  }
                
            })
            .catch(error => {
                console.error(error);
                // Handle errors, display an error message, or take appropriate action
            });
        }        


        // Function to close the modal
        function closeModal() {
            const modal = document.getElementById('modal')
            modal.classList.remove('active')
            overlay.classList.remove('active')
        }


        function searchData() {
            // Get the input element
            const input = document.getElementById('nameSearch');
            // Get the filter value (name to search for)
            const filter = input.value.toLowerCase();
        
            // Get the table and table rows
            const table = document.getElementById('attendance');
            const rows = table.getElementsByTagName('tr');
        
            // Loop through the table rows
            for (let i = 1; i < rows.length; i++) {
                const row = rows[i];
                const nameColumn = row.getElementsByTagName('td')[1]; // Assuming name is in the second column (index 1)
        
                if (nameColumn) {
                    const name = nameColumn.textContent.toLowerCase();
                    if (name.includes(filter)) {
                        // Show the row if it matches the search filter
                        row.style.display = '';
                    } else {
                        // Hide the row if it doesn't match
                        row.style.display = 'none';
                    }
                }
            }
        }
        

    </script>
</body>

</html>
